{"ast":null,"code":"var _jsxFileName = \"/home/botrott/PycharmProjects/doggram/dog_frontend/src/components/ui/select/select.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { getAchievements } from \"../../../utils/api\";\nimport arrowDownIcon from \"../../../images/arrow-down.svg\";\nimport arrowUpIcon from \"../../../images/arrow-up.svg\";\nimport addIcon from \"../../../images/add.svg\";\nimport { Checkbox } from \"../checkbox/checkbox\";\nimport { Input } from \"../input/input\";\nimport { Popup } from \"../../popup/popup\";\nimport styles from \"./select.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Select = _ref => {\n  _s();\n\n  let {\n    card,\n    setCard,\n    userAchievements,\n    extraClass = \"\"\n  } = _ref;\n  const [isOpenAchivements, setIsOpenAchivements] = React.useState(false);\n  const [currentAchievements, setCurrentAchievements] = React.useState({});\n  const [text, setText] = React.useState(userAchievements || \"Достижения\");\n  const [achievementsArr, setAchievementsArr] = React.useState([]);\n  const [achievementsArrToSearch, setAchievementsArrToSearch] = React.useState([]);\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\n  const [newAchievement, setNewAchievement] = React.useState(\"\");\n  const arrowIcon = isOpenAchivements ? arrowUpIcon : arrowDownIcon;\n\n  const handleAddAchievements = obj => {\n    if (isOpenAchivements) {\n      let result = [];\n\n      for (let key in obj) {\n        if (obj[key]) {\n          result.push({\n            achievement_name: key\n          });\n        }\n      }\n\n      setCard({ ...card,\n        achievements: result\n      });\n    }\n  };\n\n  const handleOpenAchivements = () => {\n    handleAddAchievements(currentAchievements);\n    setIsOpenAchivements(!isOpenAchivements);\n  };\n\n  const onChangeAchievements = e => {\n    setCurrentAchievements({ ...currentAchievements,\n      [e.target.name]: e.target.checked\n    });\n    handleChangeText({ ...currentAchievements,\n      [e.target.name]: e.target.checked\n    });\n    handleAddAchievements({ ...currentAchievements,\n      [e.target.name]: e.target.checked\n    });\n  };\n\n  const handleChangeText = obj => {\n    let result = [];\n\n    for (let key in obj) {\n      if (obj[key]) {\n        result.push(key);\n      }\n    }\n\n    if (result.length) {\n      setText(result.join(\", \"));\n    } else {\n      setText(\"Достижения\");\n    }\n  };\n\n  const handleSearch = e => {\n    setAchievementsArr(achievementsArrToSearch.filter(x => x.toLowerCase().indexOf(e.target.value.toLowerCase()) !== -1));\n  };\n\n  const handleGetAchievements = () => {\n    getAchievements().then(res => {\n      const arr = [];\n      res.forEach(item => {\n        arr.push(item.achievement_name);\n      });\n      setAchievementsArr(arr);\n      setAchievementsArrToSearch(arr);\n    });\n  };\n\n  const onPopupClose = () => {\n    setIsPopupOpen(false);\n  };\n\n  const onPopupOpen = () => {\n    setIsPopupOpen(true);\n  };\n\n  const handleInputChange = e => {\n    setNewAchievement(e.target.value);\n  };\n\n  const handleAddAchievement = () => {\n    setAchievementsArr([...achievementsArr, newAchievement]);\n    setAchievementsArrToSearch([...achievementsArrToSearch, newAchievement]);\n    onPopupClose();\n  };\n\n  React.useEffect(() => {\n    handleGetAchievements();\n\n    if (userAchievements) {\n      const arr = userAchievements.split(\", \");\n      const obj = {};\n      arr.forEach(item => {\n        obj[item] = true;\n      });\n      setCurrentAchievements(obj);\n      setText(userAchievements);\n    }\n  }, [userAchievements]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.content} ${extraClass}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenAchivements,\n      type: \"button\",\n      className: styles.btn,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: `text text_type_medium-16 text_color_${text === \"Достижения\" ? \"secondary\" : \"primary\"} ${styles.text}`,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.img,\n        src: arrowIcon,\n        alt: \"\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u044C \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), isOpenAchivements && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.achievements_box,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.search_box,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A\",\n          type: \"text\",\n          extraClass: styles.search_input_box,\n          extraInputClass: styles.search_input,\n          onChange: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.add_btn,\n          onClick: onPopupOpen,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: addIcon,\n            alt: \"\\u041A\\u043D\\u043E\\u043F\\u043A\\u0430 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0434\\u043E\\u0441\\u0442\\u0438\\u0436\\u0435\\u043D\\u0438\\u044F.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.achievements_list,\n        children: achievementsArr.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(Checkbox, {\n            name: item,\n            id: index,\n            checked: currentAchievements[item],\n            label: item,\n            onChange: onChangeAchievements\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Popup, {\n      onClose: onPopupClose,\n      onChange: handleInputChange,\n      onSubmit: handleAddAchievement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Select, \"CcBh76eNg2N67u6tNOhRZ/yL1y4=\");\n\n_c = Select;\n\nvar _c;\n\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"sources":["/home/botrott/PycharmProjects/doggram/dog_frontend/src/components/ui/select/select.jsx"],"names":["React","getAchievements","arrowDownIcon","arrowUpIcon","addIcon","Checkbox","Input","Popup","styles","Select","card","setCard","userAchievements","extraClass","isOpenAchivements","setIsOpenAchivements","useState","currentAchievements","setCurrentAchievements","text","setText","achievementsArr","setAchievementsArr","achievementsArrToSearch","setAchievementsArrToSearch","isPopupOpen","setIsPopupOpen","newAchievement","setNewAchievement","arrowIcon","handleAddAchievements","obj","result","key","push","achievement_name","achievements","handleOpenAchivements","onChangeAchievements","e","target","name","checked","handleChangeText","length","join","handleSearch","filter","x","toLowerCase","indexOf","value","handleGetAchievements","then","res","arr","forEach","item","onPopupClose","onPopupOpen","handleInputChange","handleAddAchievement","useEffect","split","content","btn","img","achievements_box","search_box","search_input_box","search_input","add_btn","achievements_list","map","index"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { getAchievements } from \"../../../utils/api\";\n\nimport arrowDownIcon from \"../../../images/arrow-down.svg\";\nimport arrowUpIcon from \"../../../images/arrow-up.svg\";\nimport addIcon from \"../../../images/add.svg\";\n\nimport { Checkbox } from \"../checkbox/checkbox\";\nimport { Input } from \"../input/input\";\nimport { Popup } from \"../../popup/popup\";\n\nimport styles from \"./select.module.css\";\n\nexport const Select = ({\n  card,\n  setCard,\n  userAchievements,\n  extraClass = \"\",\n}) => {\n  const [isOpenAchivements, setIsOpenAchivements] = React.useState(false);\n  const [currentAchievements, setCurrentAchievements] = React.useState({});\n  const [text, setText] = React.useState(userAchievements || \"Достижения\");\n  const [achievementsArr, setAchievementsArr] = React.useState([]);\n  const [achievementsArrToSearch, setAchievementsArrToSearch] = React.useState(\n    []\n  );\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\n  const [newAchievement, setNewAchievement] = React.useState(\"\");\n\n  const arrowIcon = isOpenAchivements ? arrowUpIcon : arrowDownIcon;\n\n  const handleAddAchievements = (obj) => {\n    if (isOpenAchivements) {\n      let result = [];\n      for (let key in obj) {\n        if (obj[key]) {\n          result.push({ achievement_name: key });\n        }\n      }\n      setCard({ ...card, achievements: result });\n    }\n  };\n\n  const handleOpenAchivements = () => {\n    handleAddAchievements(currentAchievements);\n    setIsOpenAchivements(!isOpenAchivements);\n  };\n\n  const onChangeAchievements = (e) => {\n    setCurrentAchievements({\n      ...currentAchievements,\n      [e.target.name]: e.target.checked,\n    });\n    handleChangeText({\n      ...currentAchievements,\n      [e.target.name]: e.target.checked,\n    });\n    handleAddAchievements({\n      ...currentAchievements,\n      [e.target.name]: e.target.checked,\n    });\n  };\n\n  const handleChangeText = (obj) => {\n    let result = [];\n    for (let key in obj) {\n      if (obj[key]) {\n        result.push(key);\n      }\n    }\n    if (result.length) {\n      setText(result.join(\", \"));\n    } else {\n      setText(\"Достижения\");\n    }\n  };\n\n  const handleSearch = (e) => {\n    setAchievementsArr(\n      achievementsArrToSearch.filter(\n        (x) => x.toLowerCase().indexOf(e.target.value.toLowerCase()) !== -1\n      )\n    );\n  };\n\n  const handleGetAchievements = () => {\n    getAchievements().then((res) => {\n      const arr = [];\n      res.forEach((item) => {\n        arr.push(item.achievement_name);\n      });\n      setAchievementsArr(arr);\n      setAchievementsArrToSearch(arr);\n    });\n  };\n\n  const onPopupClose = () => {\n    setIsPopupOpen(false);\n  };\n\n  const onPopupOpen = () => {\n    setIsPopupOpen(true);\n  };\n\n  const handleInputChange = (e) => {\n    setNewAchievement(e.target.value);\n  };\n\n  const handleAddAchievement = () => {\n    setAchievementsArr([...achievementsArr, newAchievement]);\n    setAchievementsArrToSearch([...achievementsArrToSearch, newAchievement]);\n    onPopupClose();\n  };\n\n  React.useEffect(() => {\n    handleGetAchievements();\n    if (userAchievements) {\n      const arr = userAchievements.split(\", \");\n      const obj = {};\n      arr.forEach((item) => {\n        obj[item] = true;\n      });\n      setCurrentAchievements(obj);\n      setText(userAchievements);\n    }\n  }, [userAchievements]);\n\n  return (\n    <div className={`${styles.content} ${extraClass}`}>\n      <button\n        onClick={handleOpenAchivements}\n        type=\"button\"\n        className={styles.btn}\n      >\n        <p\n          className={`text text_type_medium-16 text_color_${\n            text === \"Достижения\" ? \"secondary\" : \"primary\"\n          } ${styles.text}`}\n        >\n          {text}\n        </p>\n        <img className={styles.img} src={arrowIcon} alt=\"Открыть список.\" />\n      </button>\n      {isOpenAchivements && (\n        <div className={styles.achievements_box}>\n          <div className={styles.search_box}>\n            <Input\n              placeholder=\"Поиск\"\n              type=\"text\"\n              extraClass={styles.search_input_box}\n              extraInputClass={styles.search_input}\n              onChange={handleSearch}\n            />\n            <button className={styles.add_btn} onClick={onPopupOpen}>\n              <img src={addIcon} alt=\"Кнопка добавления достижения.\" />\n            </button>\n          </div>\n          <div className={styles.achievements_list}>\n            {achievementsArr.map((item, index) => {\n              return (\n                <Checkbox\n                  key={index}\n                  name={item}\n                  id={index}\n                  checked={currentAchievements[item]}\n                  label={item}\n                  onChange={onChangeAchievements}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      {isPopupOpen && (\n        <Popup\n          onClose={onPopupClose}\n          onChange={handleInputChange}\n          onSubmit={handleAddAchievement}\n        />\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}